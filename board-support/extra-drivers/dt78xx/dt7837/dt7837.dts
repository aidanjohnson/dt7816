/*
 * Device tree for the DT7837 board. This tree
 * includes am33xx.dtsi and am335x-bone-common.dtsi and  and overrides its 
 * device tree bindings as required
 *
 * Copyright (C) 2014 Data Translation Inc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * ---------------------------------------------------------------------------
 * Device Tree Bindings : 
 * 
 * This device tree adds the following bindings which are parsed by the DT78xx 
 * board driver. Each gpmc child node has the following additional bindings.
 * <gpmc,reg-config1> through <gpmc,reg-config7> which are used to write 32-bit
 * values directly to each gpmc child's chip select's GPMC_CONFIG1-GPMC_CONFIG7
 * registers. These are optional.
 *
 * There must be a top level node identifying the board and its constituent
 * subsystems. All bindings for the board are mandatory unless noted otherwise,
 * compatible : string identifying  driver name in struct platform_driver 
 * pinctrl-names : always "default"
 * pinctrl-0 : phandle to gpio pin node controlled by the board
 * status : always  "okay"
 * interrupt-parent = phandle to interrupt controller node 
 * fpga-cs : Chip select output in the GPMC address space
 * TP0 : optional. GPIO used as test point
 *
 * The board node has children nodes that identify 
 * data acquisition subsystems. Each daq subsystem node name must have one of
 * these as substrings {ain|aout|din|dout|timer|quad|stream}. Therefore, ain,
 * ain99, my_ain are all valid.
 * Each subsystem node has the following bindings.
 *
 * status : {"okay"|"disabled"} Mandatory
 * dmas : Required only if the subsystem uses DMA. This specifies the phandle to
 *        the edma parent and the edma channel number.
 *        See section 11.3.20 EDMA Events, Table 11-24 Crossbar 
 *        Mapped, section 9.2.3 EDMA Event Multiplexing and sections 9.3.1.55 to
 *        9.3.1.70 in the AM335x TRM (SPRUH73J).
 *        Event 30 = xdma_event_intr2 -> EDMA_CHAN2 crossbar mapped
 *        Event 29 = xdma_event_intr1 -> EDMA_CHAN1 crossbar mapped
 *        Event 28 = xdma_event_intr0 -> EDMA_CHAN0 crossbar mapped
 *        Event 23 = gpioevt1 -> EDMA_CHAN3 direct mapped
 * dma-names : mandatory if "dmas" is specified. Must be either {"in"|"out"} 
 * fifo-cs : GPMC chip select register number. Mandatory if "dmas" is specified.
 *	     This is the chip select for the fifo used by the subsystem
 * interrupts : If the subsystem uses DMA && if the edma event input causes
 *	   interrupt, this is mandatory.
 *         This specifies the interrupt {90|124|123} caused by the dma 
 *         event inputs. See Table 6-1 in TRM.
 *         x_dma_event_intr2->Interrupt 90,
 *         x_dma_event_intr1->Interrupt 124  
 *         x_dma_event_intr0->Interrupt 123
 *         For dma channels triggered by gpio event inputs, this binding is 
 *         absent.
 * fpga-dma-clr : Optional. This tuple specifies the fpga reg offset and value
 *	   that must be written to clear the dma status reg in the fpga.
 * dma-gpios : Optional and used iff dmas is specified.
 *         If the subsystem uses DMA and a gpio input is used as the event
 *         input, this specifies a phandle to the gpio chip along with the input
 *         pin. Example, <&gpio1 17 GPIO_ACTIVE_HIGH> 
 *         DMA channels using xdma_event_intr0/1/2, do not need this entry.  
 * offset : phandle to i2c potentiometer for subsystem's offset calibration
 * gain  : phandle to i2c potentiometer for subsystem's gain calibration
 * channels : #of channels in subsystem; for digital in/out this is the #of bits
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am335x-bone-common.dtsi"
#include "dt78xx_dts.h"

//Define this to use gpio as an edma event input. See AM335x TRM
//#define USE_GPIO_EVENT (1)

&ldo3_reg {
    regulator-min-microvolt = <1800000>;
    regulator-max-microvolt = <1800000>;
    regulator-always-on;
};

&mmc1 {
    vmmc-supply = <&vmmcsd_fixed>;
};

&mmc2 {
    status = "disabled"; /* disabled for DT78xx use */
};

&epwmss0 {
    status = "disabled"; /* disabled for DT78xx use */
};

&am33xx_pinmux {
    /*Override the default which is assigned to <&clkout2_pin> and prevents
      use of xdma_event_intr1
     */
    pinctrl-0 = <&user_leds_default>;

    dt78xx_pins: dt78xx_pins {
        pinctrl-single,pins = <
            /* Test pin */
            PINCTRL_MCASP0_FSR      (IDIS | PU |MODE7) /* gpio3_19 */

            /* DMA REQ input */
            PINCTRL_ECAP0_IN_PWM0_OUT   (IEN | OFF |MODE6) /* xdma_event_intr2*/

            /* DMA REQ input */
            PINCTRL_XDMA_EVENT_INTR1    (IEN | OFF | MODE0 )/*xdma_event_intr1*/

            /* DMA request using gpio1_17 */
            PINCTRL_GPMC_A1             (IEN | OFF | MODE7 )/*gpio1_17*/
            
            /* gpio pin tied to fpga reset. Config as input for normal operation */
            PINCTRL_GPMC_A0       (IEN | OFF |MODE7) /* gpio1_16->fpga reset */
        >;
    };
    dt78xx_gpmc_pins: dt78xx_gpmc_pins  {
        pinctrl-single,pins = <
            /* gpmc address/data multiplexd signals */
            PINCTRL_GPMC_AD0    (IEN | PD | MODE0)  /* gpmc_ad0 */
            PINCTRL_GPMC_AD1    (IEN | PD | MODE0)  /* gpmc_ad1 */
            PINCTRL_GPMC_AD2    (IEN | PD | MODE0)  /* gpmc_ad2 */
            PINCTRL_GPMC_AD3    (IEN | PD | MODE0)  /* gpmc_ad3 */
            PINCTRL_GPMC_AD4    (IEN | PD | MODE0)  /* gpmc_ad4 */
            PINCTRL_GPMC_AD5    (IEN | PD | MODE0)  /* gpmc_ad5 */
            PINCTRL_GPMC_AD6    (IEN | PD | MODE0)  /* gpmc_ad6 */
            PINCTRL_GPMC_AD7    (IEN | PD | MODE0)  /* gpmc_ad7 */
            PINCTRL_GPMC_AD8    (IEN | PD | MODE0)  /* gpmc_ad8 */
            PINCTRL_GPMC_AD9    (IEN | PD | MODE0)  /* gpmc_ad9 */
            PINCTRL_GPMC_AD10   (IEN | PD | MODE0)  /* gpmc_ad10 */
            PINCTRL_GPMC_AD11   (IEN | PD | MODE0)  /* gpmc_ad11 */
            PINCTRL_GPMC_AD12   (IEN | PD | MODE0)  /* gpmc_ad12 */
            PINCTRL_GPMC_AD13   (IEN | PD | MODE0)  /* gpmc_ad13 */
            PINCTRL_GPMC_AD14   (IEN | PD | MODE0)  /* gpmc_ad14 */
            PINCTRL_GPMC_AD15   (IEN | PD | MODE0)  /* gpmc_ad15 */

            PINCTRL_GPMC_WAIT0  (IEN | PU | MODE0 ) /* gpmc_wait0 */
            PINCTRL_GPMC_WPN    (IDIS | PU | MODE0 )/* gpmc_wpn  */
            PINCTRL_GPMC_BEN1   (IDIS | PU | MODE0 )/* gpmc_be1n */
            PINCTRL_GPMC_CSN0   (IDIS | PU | MODE0 )/* gpmc_csn0 */
            PINCTRL_GPMC_CSN1   (IDIS | PU | MODE0 )/* gpmc_csn1  */
            PINCTRL_GPMC_CSN2   (IDIS | PU | MODE0 )/* gpmc_csn2 */
            PINCTRL_GPMC_CSN3   (IDIS | PU | MODE0 )/* gpmc_csn3 Not on P8/P9 */
            PINCTRL_GPMC_CLK    (IEN | PD | MODE0 ) /* gpmc_clk_mux0 */
            PINCTRL_GPMC_ADVN_ALE (IEN | PU | MODE0 )/* gpmc_advn_ale */
            PINCTRL_GPMC_OEN_REN (IEN | PU | MODE0 ) /* gpmc_oen_ren */
            PINCTRL_GPMC_WEN    (IEN | PU | MODE0 ) /* gpmc_wen */
            PINCTRL_GPMC_BEN0_CLE (IEN | PU | MODE0 )   /* gpmc_be0n_cle */
        >;
    };
};

&edma {
    reg =   <0x49000000 0x10000>,  /* EDMA3CC registers */
            <0x44e10f90 0x40>;     /* Correct range of tpcc_evt_mux regs */

    ti,edma-xbar-event-map = <32 12>,   /* gpevt2 -> edma chan 12 */
                             <0 EDMA_CHAN3>,  /* gpioevt1 -> chan 23 direct map*/
                             <30 EDMA_CHAN2>, /* xdma_event_intr2 -> chan 20 */
                             <29 EDMA_CHAN1>, /* xdma_event_intr1 -> chan 21 */
                             <28 EDMA_CHAN0>; /* xdma_event_intr0 -> chan 13 */
};

/* Required for NAND ECC */
&elm {
    status = "okay";
};
&i2c0 
{
	/* Serial eeprom. reg binding specifies i2c address and eeprom size */
	eeprom1:eeprom@50
	{
		status = "okay";
		reg = <0x50 0x2000>;
		type = "24lc64";
	};
	/* potentiometer referenced by phandle in daq subsystem.
       reg binding is a triple <A B C>; A is devices's i2c address, B is eeprom 
       address starting at which calibration params are stored and C is number 
       of eeprom bytes reserved for storing this potentiometer's parameters */
	pot1:pot@51
	{
		status = "okay";
		type = "isl22343";
		reg = <0x51 0x800 0x80>;
	};
	pot2:pot@52
	{
		status = "okay";
		type = "isl22343";
		reg = <0x52 0x880 0x80>;
	};
	pot3:pot@53
	{
		status = "okay";
		type = "isl22343";
		reg = <0x53 0x900 0x80>;
	};
};

&gpmc {
    status = "okay";
    pinctrl-names = "default";
    pinctrl-0 = <&dt78xx_gpmc_pins>;

    /* chip select ranges */
    ranges = <0 0 0x08000000 0x10000000>,   /* CS0: NAND */
             <1 0 0x18000000 0x01000000>,   /*FPGA start=384M len=16M*/
             <2 0 0x19000000 0x01000000>,   /*FIFO start=400M len=16M*/
             <3 0 0x1A000000 0x01000000>;   /*FIFO start=416M len=16M*/
    
    nand@0,0 
    {
            reg = <0 0 0>; /* CS0, offset 0 */
            ti,nand-ecc-opt = "bch16";
            ti,elm-id = <&elm>;
            nand-bus-width = <16>;
            gpmc,device-width = <2>;
            gpmc,sync-clk-ps = <0>;
            gpmc,cs-on-ns = <0>;
            gpmc,cs-rd-off-ns = <80>;
            gpmc,cs-wr-off-ns = <80>;
            gpmc,adv-on-ns = <0>;
            gpmc,adv-rd-off-ns = <80>;
            gpmc,adv-wr-off-ns = <80>;
            gpmc,we-on-ns = <20>;
            gpmc,we-off-ns = <60>;
            gpmc,oe-on-ns = <20>;
            gpmc,oe-off-ns = <60>;
            gpmc,access-ns = <40>;
            gpmc,rd-cycle-ns = <80>;
            gpmc,wr-cycle-ns = <80>;
            gpmc,wait-on-read = "true";
            gpmc,wait-on-write = "true";
            gpmc,bus-turnaround-ns = <0>;
            gpmc,cycle2cycle-delay-ns = <0>;
            gpmc,clk-activation-ns = <0>;
            gpmc,wait-monitoring-ns = <0>;
            gpmc,wr-access-ns = <40>;
            gpmc,wr-data-mux-bus-ns = <0>;
            /* MTD partition table 
             * All SPL-* partitions are sized to minimal length which can be 
             * independently programmable. For NAND flash this is equal to size 
             * of 256KB erase-block */
            #address-cells = <1>;
            #size-cells = <1>;
            partition@0 {
                    label = "SPL";
                    reg = <0x00000000 0x00040000>;
            };
            partition@1 {
                    label = "SPL.backup1";
                    reg = <0x00040000 0x00040000>;
            };
            partition@2 {
                    label = "SPL.backup2";
                    reg = <0x00080000 0x00040000>;
            };
            partition@3 {
                    label = "SPL.backup3";
                    reg = <0x000C0000 0x00040000>;
            };
            partition@4 {
                    label = "u-boot";
                    reg = <0x00100000 0x001C0000>;
            };
            partition@5 {
                    label = "u-boot-spl-os";
                    reg = <0x002C0000 0x00040000>;
            };
            partition@6 {
                    label = "u-boot-env";
                    reg = <0x00300000 0x00040000>;
            };
            partition@7 {
                    label = "kernel";
                    reg = <0x00340000 0x00500000>;
            };
            partition@8 {
                    label = "rootfs";
                    reg = <0x00840000 0x7f7c0000>;
            };
       };   
    /*
     Since the gpmc driver only recognizes generic children with specific names,
     such as, "ethernet" and "nor" we resort to using a "nor" device
     */

    nor@2 /* Output fifo */
    {
        status = "okay";
        reg = <2 0 0x01000000>;     /* CS2 */
        bank-width = <2>;        /* GPMC_CONFIG1_DEVICESIZE(1) */
        gpmc,device-width = <2>;

#ifdef _GPMC_DT_OVERRIDE_
        gpmc,reg-config1 = <0x7D001201>;
        gpmc,reg-config2 = <0x000C0080>;
        gpmc,reg-config3 = <0x00030300>;
        gpmc,reg-config4 = <0x0B880000>;
        gpmc,reg-config5 = <0x02000E00>;
        gpmc,reg-config6 = <0x0A0602C2>;
#else
        /*gpmc,no-remap;*/
        gpmc,sync-read;          /* GPMC_CONFIG1_READTYPE_SYNC */
        gpmc,sync-write;        /* GPMC_CONFIG1_WRITETYPE_SYNC */
        gpmc,clk-activation-ns = <20>;  /* GPMC_CONFIG1_CLKACTIVATIONTIME(2) */
        
        gpmc,burst-length = <16>;   /* GPMC_CONFIG1_PAGE_LEN(2) */
        gpmc,burst-read;            /* GPMC_CONFIG1_READMULTIPLE_SUPP */
        gpmc,burst-write;
        gpmc,burst-wrap;

        gpmc,mux-add-data = <2>;    /* GPMC_CONFIG1_MUXTYPE(2) */

        gpmc,sync-clk-ps = <10000>; /* CONFIG1 GPMCFCLKDIVIDER */

        gpmc,cs-on-ns = <1>;
        gpmc,cs-rd-off-ns = <160>;
        gpmc,cs-wr-off-ns = <310>;

        gpmc,adv-on-ns = <0>;       /* CONFIG3 */
        gpmc,adv-rd-off-ns = <40>;
        gpmc,adv-wr-off-ns = <40>;

        gpmc,we-on-ns = <60>;       /* CONFIG4 */
        gpmc,we-off-ns = <310>;
        gpmc,oe-on-ns = <60>;
        gpmc,oe-off-ns = <160>;

        gpmc,page-burst-access-ns = <20>;   /* CONFIG 5 */
        gpmc,access-ns = <140>;
        gpmc,rd-cycle-ns = <160>;
        gpmc,wr-cycle-ns = <310>;

        gpmc,wr-access-ns = <100>;      /* CONFIG 6 */
        gpmc,wr-data-mux-bus-ns = <60>;

        gpmc,bus-turnaround-ns = <40>;      /* CONFIG6:3:0 = 4 */
        gpmc,cycle2cycle-samecsen;      /* CONFIG6:7 = 1 */
        gpmc,cycle2cycle-delay-ns = <40>;   /* CONFIG6:11:8 = 4 */
#endif
    };

    nor@3 /* input fifo */
    {
        status = "okay";
        reg = <3 0 0x01000000>;     /* CS3 */
        bank-width = <2>;       /* GPMC_CONFIG1_DEVICESIZE(1) */
        gpmc,device-width = <2>;

#ifdef _GPMC_DT_OVERRIDE_
        gpmc,reg-config1 = <0x7D001201>;
        gpmc,reg-config2 = <0x00000A80>;
        gpmc,reg-config3 = <0x00030300>;
        gpmc,reg-config4 = <0x00000A86>;
        gpmc,reg-config5 = <0x020A000E>;
        gpmc,reg-config6 = <0x000004C4>;
#else
        /*gpmc,no-remap;*/
        /*gpmc,burst-read;*/        /* GPMC_CONFIG1_READMULTIPLE_SUPP */
        gpmc,sync-read;         /* GPMC_CONFIG1_READTYPE_SYNC */
        gpmc,sync-write;        /* GPMC_CONFIG1_WRITETYPE_SYNC */
        gpmc,clk-activation-ns = <20>;  /* GPMC_CONFIG1_CLKACTIVATIONTIME(2) */
        gpmc,burst-length = <16>;   /* GPMC_CONFIG1_PAGE_LEN(2) */
        gpmc,mux-add-data = <2>;    /* GPMC_CONFIG1_MUXTYPE(2) */

        gpmc,sync-clk-ps = <10000>; /* CONFIG1 GPMCFCLKDIVIDER */

        gpmc,cs-on-ns = <1>;
        gpmc,cs-rd-off-ns = <160>;
        gpmc,cs-wr-off-ns = <310>;

        gpmc,adv-on-ns = <0>;       /* CONFIG3 */
        gpmc,adv-rd-off-ns = <40>;
        gpmc,adv-wr-off-ns = <40>;

        gpmc,we-on-ns = <60>;       /* CONFIG4 */
        gpmc,we-off-ns = <310>;
        gpmc,oe-on-ns = <60>;
        gpmc,oe-off-ns = <160>;

        gpmc,page-burst-access-ns = <20>;   /* CONFIG 5 */
        gpmc,access-ns = <140>;
        gpmc,rd-cycle-ns = <160>;
        gpmc,wr-cycle-ns = <310>;

        gpmc,wr-access-ns = <100>;      /* CONFIG 6 */
        gpmc,wr-data-mux-bus-ns = <60>;

        gpmc,bus-turnaround-ns = <40>;      /* CONFIG6:3:0 = 4 */
        gpmc,cycle2cycle-samecsen;      /* CONFIG6:7 = 1 */
        gpmc,cycle2cycle-delay-ns = <40>;   /* CONFIG6:11:8 = 4 */
#endif
    };
    /*
     See comments above.
     The nor node is for the FPGA tied to CS1. 
     */
    nor@1
    {
        status = "okay";  /* Mandatory */
        reg = <1 0 0x000010000>;    /* CS1 */
        bank-width = <2>;       /* GPMC_CONFIG1_DEVICESIZE(1) */
        gpmc,device-width = <2>;

#ifdef _GPMC_DT_OVERRIDE_
        gpmc,reg-config1 = <0x2C001201>;
        gpmc,reg-config2 = <0x000A0A80>;
        gpmc,reg-config3 = <0x00030300>;
        gpmc,reg-config4 = <0x08860886>;
        gpmc,reg-config5 = <0x00080C0C>;
        gpmc,reg-config6 = <0x080602C2>;
#else
        /*gpmc,burst-read;*/    /* GPMC_CONFIG1_READMULTIPLE_SUPP */
        gpmc,sync-read;         /* GPMC_CONFIG1_READTYPE_SYNC */
        gpmc,sync-write;        /* GPMC_CONFIG1_WRITETYPE_SYNC */
        gpmc,clk-activation-ns = <10>;  /* GPMC_CONFIG1_CLKACTIVATIONTIME(1) */
        gpmc,burst-length = <4>;    /* GPMC_CONFIG1_PAGE_LEN(0) */
        gpmc,mux-add-data = <2>;    /* GPMC_CONFIG1_MUXTYPE(2) */
        gpmc,sync-clk-ps = <10000>; /* CONFIG1 GPMCFCLKDIVIDER */

        gpmc,cs-on-ns = <0>;        /* CONFIG2 */
        gpmc,cs-rd-off-ns = <0>;
        gpmc,cs-wr-off-ns = <0>;
        /* gpmc,cs-extra-delay = <0>; */

        gpmc,adv-on-ns = <0>;       /* CONFIG3 */
        gpmc,adv-extra-delay;
        gpmc,adv-rd-off-ns = <10>;
        gpmc,adv-wr-off-ns = <10>;

        gpmc,we-on-ns = <60>;       /* CONFIG4 */
        gpmc,we-off-ns = <310>;
        gpmc,oe-on-ns = <60>;
        gpmc,oe-off-ns = <160>;

        gpmc,page-burst-access-ns = <20>;   /* CONFIG 5 */
        gpmc,access-ns = <140>;
        gpmc,rd-cycle-ns = <160>;
        gpmc,wr-cycle-ns = <310>;

        gpmc,wr-access-ns = <100>;      /* CONFIG 6 */
        gpmc,wr-data-mux-bus-ns = <60>;

        gpmc,bus-turnaround-ns = <40>;      /* CONFIG6:3:0 = 4 */
        gpmc,cycle2cycle-samecsen;      /* CONFIG6:7 = 1 */
        gpmc,cycle2cycle-delay-ns = <40>;   /* CONFIG6:11:8 = 4 */
#endif
    };
};
 
/ {
    cpus {
        cpu@0 {
            cpu0-supply = <&dcdc2_reg>;
            /*
             * To consider voltage drop between PMIC and SoC,
             * tolerance value is reduced to 2% from 4% and
             * voltage value is increased as a precaution.
             */
            operating-points = <
                /* kHz    uV */
                1000000 1325000
                800000  1300000
                600000  1112000
                300000   969000
            >;
        };
    };

    dt7837{
        compatible = "dt7837"; /* driver name in struct platform_driver */
        pinctrl-names = "default";
        pinctrl-0 = <&dt78xx_pins>;
	status = "okay";

        interrupt-parent = <&intc>; 

        /* Test pin TP0. Initial pin value is the third parameter in <> below
        TP0 = <&gpio3 19 0>;
         */

        fpga-cs = <1>; /* GPMC CS reg tied to FPGA */
        aout /* Analog out subsystem */
        {
            status = "okay";		/* mandatory */
			channels = <1>;
            pot = <&pot3>;       /* single pot for offset and gain */
        };
        ain
        {
            status = "okay";
			gain = <&pot2>;
			offset = <&pot1>;
			channels = <4>;
        };

        din
        {
            status = "okay";
			channels = <8>;
        };

        dout
        {
            status = "okay";
			channels = <8>;
        };

        stream-in /* input stream */
        {
            status = "okay";
            fifo-cs = <3>;
            dma-names = "in";
#ifdef USE_GPIO_EVENT
            dmas = <&edma EDMA_CHAN3>;
            dma-gpios = <&gpio1 17 GPIO_ACTIVE_HIGH>;
	    fpga-dma-clr = <0x0626 0x0008>;
#else
            dmas = <&edma EDMA_CHAN2>;
	    fpga-dma-clr = <0x0626 0x0004>;
            interrupts =<90>;
#endif  
        };

        stream-out /* output stream */ 
        {
            status = "okay";		
            fifo-cs = <2>;		
            dma-names = "out";		
            dmas = <&edma EDMA_CHAN1>;  
	    fpga-dma-clr = <0x0626 0x0002>;
            interrupts =<124>;		
        };

		ctr-tmr
		{
			status = "okay";
			channels = <1>;
		};

		measure
		{
			status = "okay";
			channels = <1>;
		};

		tach
		{
			status = "okay";
			channels = <1>;
		};
    };
 };
